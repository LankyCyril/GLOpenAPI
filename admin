#!/usr/bin/env python
from logging import getLogger, INFO
from sys import argv
from pymongo import MongoClient, DESCENDING
from bson.objectid import ObjectId
from datetime import datetime
from genefab3.config import MONGO_DB_NAME, COLLECTION_NAMES
from genefab3.mongo.dataset import CachedDataset
from genefab3.coldstorage.dataset import ColdStorageDataset
from genefab3.mongo.cacher import update_metadata_index
from genefab3.sql.cache import drop_response_lru_cache
from genefab3.mongo.utils import run_mongo_transaction
from json import dumps


TIME_FMT = "%Y-%m-%d %H:%M:%S"
TYPE_OPTS = {True: "Exception", False: "LogMessage", None: "Unknown"}

logger = getLogger("genefab3")
logger.setLevel(INFO)


def format_timestamp(timestamp):
    return datetime.utcfromtimestamp(timestamp).strftime(TIME_FMT)


def confirm(prompt):
    mask = "Are you sure? Type '{}' without quotes to confirm:\n"
    if input(mask.format(prompt)) != prompt:
        raise ValueError


def drop(mongo_db, what):
    confirm("Yes, drop " + what)
    if what == "ALLMETA":
        confirm("Yes, I am really sure I want to drop ALLMETA")
        collection_names = {
            "dataset_timestamps", "json_cache", "annotations",
            "metadata", "metadata_index",
        }
        for cname in collection_names:
            run_mongo_transaction(
                action="delete_many",
                collection=getattr(mongo_db, cname),
                query={},
            )
    elif what == "log":
        run_mongo_transaction(
            action="delete_many",
            collection=getattr(mongo_db, COLLECTION_NAMES.LOG),
            query={},
        )
    else:
        CachedDataset.drop_cache(mongo_db=mongo_db, accession=what)
        update_metadata_index(mongo_db, logger=logger)
        drop_response_lru_cache(logger=logger)


def recache(mongo_db, what):
    if what.startswith("ALL"):
        raise NotImplementedError
    else:
        confirm("Yes, recache " + what)
        CachedDataset.drop_cache(mongo_db=mongo_db, accession=what)
        CachedDataset(mongo_db, what, logger=logger)
        update_metadata_index(mongo_db, logger=logger)
        drop_response_lru_cache(logger=logger)


def showlog_brief_lines(mongo_db, query, max_i):
    sort = [("timestamp", DESCENDING), ("_id", DESCENDING)]
    log_collection = getattr(mongo_db, COLLECTION_NAMES.LOG)
    for i, entry in enumerate(log_collection.find(query, sort=sort)):
        fields = [
            entry["_id"],
            format_timestamp(entry["timestamp"]),
            TYPE_OPTS[entry.get("is_exception")][0],
            "type={}".format(entry.get("type")),
            entry.get("value", "(no message)"),
            "from={}".format(entry.get("remote_addr")),
            "has_stack_info" if entry.get("stack") else "no_stack_info",
        ]
        print(*fields[:3], sep="; ", end=" ")
        print(*fields[3:], sep="\t")
        if i > max_i:
            break


def showlog_single_entry(mongo_db, _id):
    log_collection = getattr(mongo_db, COLLECTION_NAMES.LOG)
    entry = log_collection.find_one({"_id": _id})
    fields = [
        "_id  = {}".format(entry["_id"]),
        "time = {}".format(format_timestamp(entry["timestamp"])),
        "what = {}".format(TYPE_OPTS[entry.get("is_exception")]),
        "type = {}".format(entry.get("type")),
        "from = {}".format(entry.get("remote_addr")),
        "path = {}".format(entry.get("full_path")),
        "mess = {}".format(entry.get("value")),
        "---",
        entry.get("stack", ""),
    ]
    print(*fields, sep="\n")


def showlog(mongo_db, how):
    if how.isdigit() or ((not how.startswith("_id")) and ("=" in how)):
        if how.isdigit():
            query = {}
            max_i = int(how) - 1
        else:
            k, v = how.split("=", 1)
            if v == "True":
                v = True
            elif v == "False":
                v = False
            query = {k: v}
            max_i = float("inf")
        showlog_brief_lines(mongo_db, query, max_i)
    elif how.startswith("_id="):
        showlog_single_entry(mongo_db, _id=ObjectId(how.lstrip("_id=")))
    else:
        raise NotImplementedError


def test_isa(mongo_db, accession, assay_name, attribute):
    timestamps_collection = getattr(
        mongo_db, COLLECTION_NAMES.DATASET_TIMESTAMPS,
    )
    if timestamps_collection.find_one({"accession": accession}):
        glds = CachedDataset(mongo_db, accession, logger=logger)
    else:
        glds = ColdStorageDataset(accession)
    assay = glds.assays[assay_name]
    data = getattr(assay, attribute)
    print(dumps(data, indent=4, sort_keys=True))


if len(argv) > 1:
    mongo = MongoClient()
    mongo_db = getattr(mongo, MONGO_DB_NAME)
    if argv[1] == "drop":
        drop(mongo_db, argv[2])
    elif argv[1] == "recache":
        recache(mongo_db, argv[2])
    elif argv[1] == "log":
        if len(argv) > 2:
            showlog(mongo_db, argv[2])
        else:
            showlog_brief_lines(mongo_db, {}, float("inf"))
    elif argv[1] == "test-isa":
        test_isa(mongo_db, argv[2], argv[3], argv[4])
    else:
        raise NotImplementedError
else:
    raise NotImplementedError
